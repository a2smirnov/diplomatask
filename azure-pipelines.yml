# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# Setting "build and deploy" trigger - master branch with 'Build' tag
trigger:
  batch: true
  tags:
    include:
      - '*Build*'
  paths:
    exclude:
      - README.md


resources:
- repo: self

variables:
- group: 'Diploma'
- group: 'Application'
  # Images for app parts
- name: imageRepositoryFE
  value: 'ascicdacr/fe-nginx'
- name: imageRepositoryBE-nginx
  value: 'ascicdacr/be-nginx'
- name: imageRepositoryBE-php
  value: 'ascicdacr/be-php'
  # Other Build settings
- name: dockerfilePathFE
  value: './frontend/Dockerfile'
- name: dockerfilePathBE-nginx
  value: './backend/Dockerfile-nginx'
- name: dockerfilePathBE-php
  value: './backend/Dockerfile-php'
- name: frontendContext
  value: './frontend/'
- name: backendContext
  value: './backend/'
- name: tag
  value: '$(Build.SourceBranchName)_$(Build.BuildNumber)'
- name: kustomizationFolder
  value: '$(Pipeline.Workspace)/manifests'
  # Agent VM image name
- name: vmImageName
  value: 'ubuntu 20.04'

stages:
- stage: QualityGate
  displayName: Checking source code with SonarCloud
  jobs:
    - job: CodeCheck
      steps:
        - task: SonarCloudPrepare@1
          displayName: 'Prepare analysis on SonarCloud'
          inputs:
            SonarCloud: $(SonarCloudConnection)
            organization: 'asmirnov51'
            scannerMode: 'CLI'
            configMode: 'manual'
            cliProjectKey: 'asmirnov51_test-repo'
            cliProjectName: 'test repo'
            cliSources: '.'
            extraProperties: |
              sonar.exclusions=**/jquery.js
        - task: SonarCloudAnalyze@1
        - task: SonarCloudPublish@1
          inputs:
            pollingTimeoutSec: '60'

- stage: Build
  displayName: Building and storing application images in ACR
#  dependsOn: QualityGate
  jobs:
  - job: Build
    displayName: Building and storing images
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push FE image
      inputs:
        command: BuildAndPush
        repository: $(imageRepositoryFE)
        containerRegistry: $(dockerRegistryServiceConnection)
        buildContext: $(frontendContext)
        dockerfile: $(dockerfilePathFE)
        tags: $(tag)
    - task: Docker@2
      displayName: Build and push BE-nginx image
      inputs:
        command: BuildAndPush
        repository: $(imageRepositoryBE-nginx)
        containerRegistry: $(dockerRegistryServiceConnection)
        buildContext: $(backendContext)
        dockerfile: $(dockerfilePathBE-nginx)
        tags: $(tag)
    - task: Docker@2
      displayName: Build and push BE-php image
      inputs:
        command: BuildAndPush
        repository: $(imageRepositoryBE-php)
        containerRegistry: $(dockerRegistryServiceConnection)
        buildContext: $(backendContext)
        dockerfile: $(dockerfilePathBE-php)
        tags: $(tag)
#manifest preparation
    - script: envsubst < manifests/ingress-tmp.yaml > manifests.$ENV_TYPE/ingress.yaml
      displayName: Manifest template for dev
      env:
        EXT_NAME: "$(devEnv).$(aksExternalIP).nip.io"
        ENV_TYPE: $(devEnv)
    - script: envsubst < manifests/ingress-tmp.yaml > manifests.$ENV_TYPE/ingress.yaml
      displayName: Manifest template for dev
      env:
        EXT_NAME: "$(prodEnv).$(aksExternalIP).nip.io"
        ENV_TYPE: $(prodEnv)

    - publish: manifests
      artifact: manifests
    - publish: manifests.$(devEnv)
      artifact: manifests.$(devEnv)
    - publish: manifests.$(prodEnv)
      artifact: manifests.$(prodEnv)

- stage: Deploy
  displayName: Deploying application to Azure k8s 
  dependsOn: Build

  jobs:
  - deployment: DeployDev
    displayName: Deploy to AKS dev
    pool:
      vmImage: $(vmImageName)
    environment: $(devEnv)
    strategy:
      runOnce:
        deploy:
          steps:
          - template: templates/aksdeploy.yaml
            parameters:
              deployToEnv: $(devEnv)
  - deployment: DeployProd
    dependsOn: DeployDev
    displayName: Deploy to AKS prod
    pool:
      vmImage: $(vmImageName)
    environment: $(prodEnv)
    strategy:
      runOnce:
        deploy:
          steps:
          - template: templates/aksdeploy.yaml
            parameters:
              deployToEnv: $(prodEnv)

